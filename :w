<script lang="ts">
import { onDestroy, onMount } from "svelte";

const songs = [
    { name: 'Rick Astley - Never Gonna Give You Up', src_name: 'Rick Roll', time: '3:32', artist: 'Rick Astley', album: '', genre: '', plays: '' },
]
const navBtns = [
    { name: 'Home', icon: '􀎞', title: 'Apple Music' },
    { name: 'Radio', icon: '􀌙' },
    { name: 'Recently Added', icon: '􀐫', title: 'Library' },
    { name: 'Artists', icon: '􀑫' },
    { name: 'Albums', icon: '􀐋' },
    { name: 'Songs', icon: '􀑪', active: true },
    { name: 'iTunes Store', icon: '􀋂', title: 'Store' },
    { name: 'All Playlists', icon: '􀦲', title: 'Playlists' },
]

let music: HTMLAudioElement;
let timeBar: HTMLInputElement;
let volumeBar: HTMLInputElement;
let volume = .1;
let currTime: number = 0;
let duration: number = 0;
let isTimerChanging: boolean = false;

let isPlaying: boolean = false;
let activeMusic: string = '';

$: activeMusicData = songs.find(song => song?.src_name === activeMusic);

const playMusic = (name: string) => {
    if (activeMusic === name) return;
    if (isPlaying && music) {
        music.pause();
        isPlaying = false;
    }

    activeMusic = name;
    music = new Audio(`/src/lib/assets/music/${name}.mp3`);

    music?.addEventListener('canplaythrough', () => {
        if (!music) return;

        music.volume = volume;

        duration = music.duration;

        music?.addEventListener('timeupdate', () => {
            if (isTimerChanging) return;

            currTime = music.currentTime;
            const percent = currTime / duration * 100;
            if (timeBar) timeBar.value = percent?.toFixed(1);
        })

    })
}

onMount(() => {
    const storVolume = localStorage.getItem('volume'); 
    if (storVolume) volume = +storVolume;

    timeBar?.addEventListener('input', updateTimer)
    timeBar?.addEventListener('change', changeOnReleaseTimer)
    volumeBar?.addEventListener('input', updateVolume)
    volumeBar?.addEventListener('change', saveVolume)
})
onDestroy(() => {
    timeBar?.removeEventListener('input', updateTimer);
    timeBar?.removeEventListener('change', changeOnReleaseTimer);
    volumeBar?.removeEventListener('input', updateVolume);
    volumeBar?.removeEventListener('change', saveVolume)
})
const saveVolume = () => {
   localStorage.setItem('volume', volume.toString()) 
}
const updateVolume = (e: Event) => {
    const target = e?.target as HTMLInputElement;
    const value = +target?.value;

    volume = value / 100;
    if (music) music.volume = value / 100;
}
const updateTimer = (e: Event) => {
    const target = e?.target as HTMLInputElement;

    isTimerChanging = true;

    const value = target?.value;
    const time = +value / 100 * duration;

    if (music) music.currentTime = time;
    if (music?.paused) {
        music.play();
        isPlaying = true;
    }
}
const changeOnReleaseTimer = () => {
    isTimerChanging = false;
} 
const playPauseBtn = () => {
    if (!music) {
        isPlaying = !isPlaying;
        const name = songs[0].src_name;
        playMusic(name);
        if (music) (music as HTMLAudioElement).play();
        return;
    }

    isPlaying = !isPlaying;
    if (music.paused) { music?.play() } else { music?.pause() };
}
const volumeMinMax = (vol: number) => {
    if (music) music.volume = vol;
    volume = vol;

    if (volumeBar) volumeBar.value = `${vol * 100}`;
    saveVolume();
}
</script>

<div class="container">
    <nav>
        <input type="text" placeholder="Search" />
        {#each navBtns as btn }
            {#if btn?.title}
               <h5>{btn?.title}</h5> 
            {/if}
           <div class="line flex {btn?.active ? 'active' : ''}">
                <i>{btn?.icon}</i>
                <p>{btn?.name}</p>
            </div> 
        {/each}
    </nav>
    <div class="content">
        <div class="track flex">
            <div class="flex controls">
                <button>􀊝</button>
                <button class="medium-i">􀊊</button>
                <button class="big-i" on:click={ playPauseBtn }>{!isPlaying ? '􀊄' : '􀊆'}</button>
                <button class="medium-i">􀊌</button>
                <button on:click={() => music?.loop }>􀊞</button>
            </div>
            <div class="playing-song flex">
                <div class="cover"></div>
                <div class="song-info">
                    {#if currTime}
                        <p>{activeMusicData?.name ?? ''}</p>
                        <p>{activeMusicData?.artist?? ''}</p>
                        <input class="time-bar" bind:this={timeBar} value='0' type="range" >
                    {:else}
                        <i style="font-size: 18px;">􀣺</i>
                    {/if}
                </div>
            </div>
            <div class="flex volume">
                <button on:click={() => volumeMinMax(0) }>􀊡</button>
                <input class="volume-bar" bind:this={volumeBar} value='{volume * 100}' type="range" >
                <button on:click={() => volumeMinMax(1) }>􀊩</button>
            </div>
            <div class="flex controls">
                <button>􀌮</button>
                <button>􀋲</button>
            </div>
        </div>
        <h2>Songs</h2>
        <div class="songs">
            <div class="overflow">
                <div class="infos grid">
                    <p></p>
                    <p>Title</p>
                    <p class="align-center">􀌋</p>
                    <p class="align-right">Time</p>
                    <p>Artist</p>
                    <p>Album</p>
                    <p>Genre</p>
                    <p class="align-center">􀋂</p>
                    <p class="align-right">Plays</p>
                </div>
                <div class="pattern">
                    {#each songs as song}
                        <button class="song grid" on:focusin={() => playMusic(song?.src_name) }>
                            <p>{song?.src_name === activeMusic ? '􀊡' : ''}</p>
                            <p>{song?.name}</p>
                            <p class="align-center">􀁸</p>
                            <p class="align-right">{song?.time}</p>
                            <p>{song?.artist}</p>
                            <p>{song?.album}</p>
                            <p>{song?.genre}</p>
                            <p class="align-center">􀋂</p>
                            <p>{song?.plays}</p>
                        </button> 
                    {/each}
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.container {
    --light-grey: #2c2c2a;
    --light-grey-track: #3d3d3d;
    width: 100%;
    height: 100%;
    display: flex;
    display:grid;
    grid-template-columns: 7rem 1fr;
}
h5 {
    font-size: calc(var(--font-ratio) - 2px);
    margin-block: 0.5rem 0.25rem;
    opacity: 0.5;
}
nav {
    width: 100%;
    height: 100%;
    background: var(--dark-fullscreen);
    backdrop-filter: blur(var(--blur));
    border-right: 1px solid black;
    padding: var(--nav-height) 5px 0 5px;
}
input, button {
    background: transparent;
    border: none;
    outline: none;
}
input[type=text] {
    width: 100%;
    background: grey;
    border: none;
    outline: none;
    border-radius: 2px;
}
input[type=range], input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
}
.flex {
    display: flex;
    align-items: center;
}
.track .flex {
    color: #7C7C7C;
    font-size: var(--font-ratio);
}
.volume {
    gap: 2px;
}
.controls {
    gap: 4px;
}
.medium-i {
    font-size: calc(var(--font-size) + 3.5px);
}
.big-i {
    font-size: calc(var(--font-size) + 6px);
}
.playing-song {
    width: 100%;
    height: 100%;
    background-color: var(--light-grey-track);
    border-radius: 2px;
    overflow: hidden;
}
.cover {
    height: 100%;
    aspect-ratio: 1/1;
    background-color: grey;
}
.song-info {
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    overflow: hidden;
}
.song-info p {
    max-width: 80%;
    white-space: nowrap;
    overflow: hidden;
}
.time-bar {
    width: 100%;
    height: 2px;
    background: #7C7C7C;
}
.time-bar::-webkit-slider-thumb {
    width: 2px;
    height: 2px;
    background: white;
}
.volume-bar {
    width: 40px;
    height: 2px;
    background: #7C7C7C;
    border-radius: 4px;
}
.volume-bar::-webkit-slider-thumb {
    width: 8px;
    height: 8px;
    background: #1B1B1B;
    outline: 1px solid #7C7C7C;
    border-radius: 50%;
}
.line {
    width: 100%;
    gap: 4px;
    padding: 2px 8px;
    opacity: 0.5;
    border-radius: 2px;
}
h2 {
    background-color: #21211f;
    padding-block: 5px;
    font-size: calc(var(--font-size) + 2px);
    font-weight: 500;
    text-align: center;
}
i,
nav p,
h5 {
    color: #7c7c7c;
}
.active {
    opacity: 1;
    background-color: #7c7c7c80;
}
.active p {
    color: white;
}
.active i {
    color: #e84f6a;
}
.content {
    --height: calc(var(--font-size) + 6px);
    width: 100%;
    height: 100%;
    background-color: #21211f;
    display: grid;
    grid-template-rows: var(--nav-height) min-content 1fr;
}
.track {
    width: 100%;
    justify-content: space-between;
    height: var(--nav-height);
    border-bottom: 1px solid grey;
    background-color: #1b1b1b;
    padding: 2px 10px;
    gap: 20px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
}
.infos {
    width: 100%;
    border-bottom: 1px solid grey;
}
.infos p {
    border-right: 1px solid grey;
}
.infos p:nth-child(2) {
    border-left: 1px solid grey;
}
.songs {
    width: 100%;
    height: 100%;
    overflow: scroll hidden;
    position: relative;
}
.pattern {
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
        to bottom,
        var(--light-grey),
        var(--light-grey) var(--height),
        #21211f var(--height),
        #21211f calc(var(--height) * 2)
        );
    padding-right: 1rem;
}
.overflow {
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
}
.song {
    width: 100%;
    height: var(--height);
    font-size: var(--font-size);
}
.grid {
    --100: calc(var(--height) * 10);
    --50: calc(var(--100) / 2);
    --25: calc(var(--100) / 4);
    --10: calc(var(--100) / 8);
    display: grid;
    align-items: center;
    grid-template-columns: var(--10) var(--100) var(--10) var(--25) var(--50) var(--50) var(--25) var(--10) var(--25);
}
.grid p {
    padding-inline: 2px;
    text-align: start;
}
.grid .align-center {
    text-align: center;
}
.grid .align-right {
    text-align: end;
}
.song-info p, .song p {
    color: white;
}
.song p {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-right: 1px solid transparent;
}
.song p:nth-child(2) {
    border-left: 1px solid transparent;
}
.selected {
    background-color: #BB2E33;
}
.song:focus, .song:focus-within {
    background-color: #BB2E33;
}
</style>
